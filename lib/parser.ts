/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* mod := _args={_ inner=expr}+ _ $
*     .args = expr[] { return _args.map(arg => arg.inner) }
* expr := atom | abs | app
* atom := int | sym
* app := '\(' _args={_ inner=expr}* _ '\)'
*     .args = expr[] { return _args.map(arg => arg.inner) }
* abs := '\(' _args={_ inner=sym}+ _ '\)' _ '\=\>' _ body=expr
*     .args = sym[] { return [body].concat(_args.map(arg => arg.inner)) }
* int := value='[0-9]+'
* sym := value='[a-zA-Z_][a-zA-Z0-9_]*'
* _ := '[ \t\n]*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    mod = "mod",
    mod_$0 = "mod_$0",
    expr_1 = "expr_1",
    expr_2 = "expr_2",
    expr_3 = "expr_3",
    atom_1 = "atom_1",
    atom_2 = "atom_2",
    app = "app",
    app_$0 = "app_$0",
    abs = "abs",
    abs_$0 = "abs_$0",
    int = "int",
    sym = "sym",
    _ = "_",
    $EOF = "$EOF",
}
export class mod {
    public kind: ASTKinds.mod = ASTKinds.mod;
    public _args: mod_$0[];
    public args: expr[];
    constructor(_args: mod_$0[]) {
        this._args = _args;
        this.args = ((): expr[] => {
            return _args.map((arg) => arg.inner);
        })();
    }
}
export interface mod_$0 {
    kind: ASTKinds.mod_$0;
    inner: expr;
}
export type expr = expr_1 | expr_2 | expr_3;
export type expr_1 = atom;
export type expr_2 = abs;
export type expr_3 = app;
export type atom = atom_1 | atom_2;
export type atom_1 = int;
export type atom_2 = sym;
export class app {
    public kind: ASTKinds.app = ASTKinds.app;
    public _args: app_$0[];
    public args: expr[];
    constructor(_args: app_$0[]) {
        this._args = _args;
        this.args = ((): expr[] => {
            return _args.map((arg) => arg.inner);
        })();
    }
}
export interface app_$0 {
    kind: ASTKinds.app_$0;
    inner: expr;
}
export class abs {
    public kind: ASTKinds.abs = ASTKinds.abs;
    public _args: abs_$0[];
    public body: expr;
    public args: sym[];
    constructor(_args: abs_$0[], body: expr) {
        this._args = _args;
        this.body = body;
        this.args = ((): sym[] => {
            return [body].concat(_args.map((arg) => arg.inner));
        })();
    }
}
export interface abs_$0 {
    kind: ASTKinds.abs_$0;
    inner: sym;
}
export interface int {
    kind: ASTKinds.int;
    value: string;
}
export interface sym {
    kind: ASTKinds.sym;
    value: string;
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = { overallPos: 0, line: 1, offset: 0 };
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchmod($$dpth: number, $$cr?: ErrorTracker): Nullable<mod> {
        return this.run<mod>($$dpth, () => {
            let $scope$_args: Nullable<mod_$0[]>;
            let $$res: Nullable<mod> = null;
            if (
                true &&
                ($scope$_args = this.loop<mod_$0>(
                        () => this.matchmod_$0($$dpth + 1, $$cr),
                        false,
                    )) !== null &&
                this.match_($$dpth + 1, $$cr) !== null &&
                this.match$EOF($$cr) !== null
            ) {
                $$res = new mod($scope$_args);
            }
            return $$res;
        });
    }
    public matchmod_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<mod_$0> {
        return this.run<mod_$0>($$dpth, () => {
            let $scope$inner: Nullable<expr>;
            let $$res: Nullable<mod_$0> = null;
            if (
                true &&
                this.match_($$dpth + 1, $$cr) !== null &&
                ($scope$inner = this.matchexpr($$dpth + 1, $$cr)) !== null
            ) {
                $$res = { kind: ASTKinds.mod_$0, inner: $scope$inner };
            }
            return $$res;
        });
    }
    public matchexpr($$dpth: number, $$cr?: ErrorTracker): Nullable<expr> {
        return this.choice<expr>([
            () => this.matchexpr_1($$dpth + 1, $$cr),
            () => this.matchexpr_2($$dpth + 1, $$cr),
            () => this.matchexpr_3($$dpth + 1, $$cr),
        ]);
    }
    public matchexpr_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_1> {
        return this.matchatom($$dpth + 1, $$cr);
    }
    public matchexpr_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_2> {
        return this.matchabs($$dpth + 1, $$cr);
    }
    public matchexpr_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_3> {
        return this.matchapp($$dpth + 1, $$cr);
    }
    public matchatom($$dpth: number, $$cr?: ErrorTracker): Nullable<atom> {
        return this.choice<atom>([
            () => this.matchatom_1($$dpth + 1, $$cr),
            () => this.matchatom_2($$dpth + 1, $$cr),
        ]);
    }
    public matchatom_1($$dpth: number, $$cr?: ErrorTracker): Nullable<atom_1> {
        return this.matchint($$dpth + 1, $$cr);
    }
    public matchatom_2($$dpth: number, $$cr?: ErrorTracker): Nullable<atom_2> {
        return this.matchsym($$dpth + 1, $$cr);
    }
    public matchapp($$dpth: number, $$cr?: ErrorTracker): Nullable<app> {
        return this.run<app>($$dpth, () => {
            let $scope$_args: Nullable<app_$0[]>;
            let $$res: Nullable<app> = null;
            if (
                true &&
                this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !==
                    null &&
                ($scope$_args = this.loop<app_$0>(
                        () => this.matchapp_$0($$dpth + 1, $$cr),
                        true,
                    )) !== null &&
                this.match_($$dpth + 1, $$cr) !== null &&
                this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
            ) {
                $$res = new app($scope$_args);
            }
            return $$res;
        });
    }
    public matchapp_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<app_$0> {
        return this.run<app_$0>($$dpth, () => {
            let $scope$inner: Nullable<expr>;
            let $$res: Nullable<app_$0> = null;
            if (
                true &&
                this.match_($$dpth + 1, $$cr) !== null &&
                ($scope$inner = this.matchexpr($$dpth + 1, $$cr)) !== null
            ) {
                $$res = { kind: ASTKinds.app_$0, inner: $scope$inner };
            }
            return $$res;
        });
    }
    public matchabs($$dpth: number, $$cr?: ErrorTracker): Nullable<abs> {
        return this.run<abs>($$dpth, () => {
            let $scope$_args: Nullable<abs_$0[]>;
            let $scope$body: Nullable<expr>;
            let $$res: Nullable<abs> = null;
            if (
                true &&
                this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !==
                    null &&
                ($scope$_args = this.loop<abs_$0>(
                        () => this.matchabs_$0($$dpth + 1, $$cr),
                        false,
                    )) !== null &&
                this.match_($$dpth + 1, $$cr) !== null &&
                this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !==
                    null &&
                this.match_($$dpth + 1, $$cr) !== null &&
                this.regexAccept(String.raw`(?:\=\>)`, $$dpth + 1, $$cr) !==
                    null &&
                this.match_($$dpth + 1, $$cr) !== null &&
                ($scope$body = this.matchexpr($$dpth + 1, $$cr)) !== null
            ) {
                $$res = new abs($scope$_args, $scope$body);
            }
            return $$res;
        });
    }
    public matchabs_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<abs_$0> {
        return this.run<abs_$0>($$dpth, () => {
            let $scope$inner: Nullable<sym>;
            let $$res: Nullable<abs_$0> = null;
            if (
                true &&
                this.match_($$dpth + 1, $$cr) !== null &&
                ($scope$inner = this.matchsym($$dpth + 1, $$cr)) !== null
            ) {
                $$res = { kind: ASTKinds.abs_$0, inner: $scope$inner };
            }
            return $$res;
        });
    }
    public matchint($$dpth: number, $$cr?: ErrorTracker): Nullable<int> {
        return this.run<int>($$dpth, () => {
            let $scope$value: Nullable<string>;
            let $$res: Nullable<int> = null;
            if (
                true &&
                ($scope$value = this.regexAccept(
                        String.raw`(?:[0-9]+)`,
                        $$dpth + 1,
                        $$cr,
                    )) !== null
            ) {
                $$res = { kind: ASTKinds.int, value: $scope$value };
            }
            return $$res;
        });
    }
    public matchsym($$dpth: number, $$cr?: ErrorTracker): Nullable<sym> {
        return this.run<sym>($$dpth, () => {
            let $scope$value: Nullable<string>;
            let $$res: Nullable<sym> = null;
            if (
                true &&
                ($scope$value = this.regexAccept(
                        String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`,
                        $$dpth + 1,
                        $$cr,
                    )) !== null
            ) {
                $$res = { kind: ASTKinds.sym, value: $scope$value };
            }
            return $$res;
        });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:[ \t\n]*)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchmod(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchmod(0);
        if (res) {
            return { ast: res, errs: [] };
        }
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchmod(0, rec);
        const err = rec.getErr();
        return { ast: res, errs: err !== null ? [err] : [] };
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        if (res !== null) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(
        match: string,
        dpth: number,
        cr?: ErrorTracker,
    ): Nullable<string> {
        return this.run<string>(dpth, () => {
            const reg = new RegExp(match, "y");
            const mrk = this.mark();
            reg.lastIndex = mrk.overallPos;
            const res = this.tryConsume(reg);
            if (cr) {
                cr.record(mrk, res, {
                    kind: "RegexMatch",
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    literal: match.substring(3, match.length - 1),
                    negated: this.negating,
                });
            }
            return res;
        });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1
                    ? this.pos.offset + res[0].length
                    : (res[0].length - lind - 1),
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(
        rule: $$RuleType<K>,
        memo: Map<number, [Nullable<K>, PosInfo]>,
    ): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if (this.memoSafe && $scope$memoRes !== undefined) {
            this.reset($scope$memoRes[1]);
            return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if (this.memoSafe) {
            memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        }
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{ kind: ASTKinds.$EOF }> {
        const res: { kind: ASTKinds.$EOF } | null = this.finished()
            ? { kind: ASTKinds.$EOF }
            : null;
        if (et) {
            et.record(this.mark(), res, {
                kind: "EOF",
                negated: this.negating,
            });
        }
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<mod>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${
            this.expmatches.map((x) =>
                x.kind === "EOF"
                    ? " EOF"
                    : ` ${x.negated ? "not " : ""}'${x.literal}'`
            )
        }`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = { overallPos: -1, line: -1, offset: -1 };
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if (att.kind === "RegexMatch") {
                if (!this.regexset.has(att.literal)) {
                    this.pmatches.push(att);
                }
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.pmatches);
        }
        return null;
    }
}
